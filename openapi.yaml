openapi: 3.0.1
info:
  title: VmTodo
  description: A simple project for ORM tests
  version: v1
servers:
  - url: http://localhost:22000/
paths:
  /category/{categoryId}:
    get:
      tags:
        - category
      summary: Find category by ID
      description: Returns a single item
      operationId: getCategoryById
      parameters:
        - name: categoryId
          in: path
          description: ID of category to return
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Item not found
          content: {}
    delete:
      tags:
        - category
      summary: Deletes a category
      description: delete a category
      operationId: deleteCategory
      parameters:
        - name: categoryId
          in: path
          description: category id to delete
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Successful operation
          content: {}
        400:
          description: Invalid category value
          content: {}
  /category/all:
    get:
      tags:
        - category
      summary: All categories
      description: Returns list of categories
      operationId: getAllCategories
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  allOf:
                    - $ref: '#/components/schemas/Category'
  /category:
    put:
      tags:
        - category
      summary: Update an exists category
      description: Update an exists category
      operationId: updateCategory
      requestBody:
        description: Update an exists category
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Category'
        required: true
      responses:
        200:
          description: Successful operation
          content: {}
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Item not found
          content: {}
        405:
          description: Validation exception
          content: {}
      x-codegen-request-body-name: Category
    post:
      tags:
        - category
      summary: Add a new category
      description: Add a new category
      operationId: addCategory
      requestBody:
        description: Create a new category
        content:
          '*/*':
            schema:
              required:
                - description
                - title
              type: object
              properties:
                title:
                  type: string
                description:
                  type: string
        required: true
      responses:
        200:
          description: Successful operation
          content: {}
        405:
          description: Invalid input
          content: {}
      x-codegen-request-body-name: CategoryWithoutId
  /item/{itemId}:
    get:
      tags:
        - item
      summary: Find todo item by ID
      description: Returns a single item
      operationId: getItemById
      parameters:
        - name: itemId
          in: path
          description: ID of item to return
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Item not found
          content: {}
    delete:
      tags:
        - item
      summary: Deletes a item
      description: delete a item
      operationId: deleteItem
      parameters:
        - name: itemId
          in: path
          description: item id to delete
          required: true
          schema: {}
      responses:
        200:
          description: Successful operation
          content: {}
        400:
          description: Invalid category value
          content: {}
  /item/all:
    get:
      tags:
        - item
      summary: All items
      description: Returns list of items
      operationId: getAllItems
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  allOf:
                    - $ref: '#/components/schemas/Item'
  /item/foundByCategoryId/{categoryId}:
    get:
      tags:
        - item
      summary: Find todo item by category ID
      description: Returns list of items
      operationId: getItemsByCategoryId
      parameters:
        - name: categoryId
          in: path
          description: ID category for found items to return
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  allOf:
                    - $ref: '#/components/schemas/Item'
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Items not found
          content: {}
  /item:
    put:
      tags:
        - item
      summary: Update an exists item
      description: Update an exists item
      operationId: updateItem
      requestBody:
        description: Create a new Item
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Item'
        required: true
      responses:
        200:
          description: Successful operation
          content: {}
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Item not found
          content: {}
        405:
          description: Validation exception
          content: {}
      x-codegen-request-body-name: Item
    post:
      tags:
        - item
      summary: Add a new item
      description: Add a new item
      operationId: addItem
      requestBody:
        description: Create a new Item
        content:
          '*/*':
            schema:
              required:
                - categoryId
                - description
                - title
              type: object
              properties:
                title:
                  type: string
                description:
                  type: string
                categoryId:
                  type: integer
        required: true
      responses:
        200:
          description: Successful operation
          content: {}
        405:
          description: Invalid input
          content: {}
      x-codegen-request-body-name: ItemWithoutId
components:
  schemas:
    Item:
      required:
        - categoryId
        - id
        - title
      type: object
      properties:
        id:
          type: integer
          example: 13
        categoryId:
          type: integer
          example: 2
        title:
          type: string
          example: Drink water
        description:
          type: string
          example: Be healthy and drink water
    Category:
      required:
        - id
        - title
      type: object
      properties:
        id:
          type: integer
          example: 13
        title:
          type: string
          example: Home
        description:
          type: string
          example: Category for home tasks
